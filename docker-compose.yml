version: "3"

services:
  nginx:
    image: nginx:1.18-alpine
    container_name: bizdata_saas__nginx
    restart: unless-stopped
    ports:
      - "80:80"
#      - "443:443"
    volumes:
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./infrastructure/nginx/logs:/var/log/nginx
#      - ./infrastructure/certbot/conf:/etc/letsencrypt
#      - ./infrastructure/certbot/www:/var/www/certbot
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
#      - redis
      - postgres
#      - minio
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - app_network

#  certbot:
#    image: certbot/certbot
#    restart: unless-stopped
#    volumes:
#      - ./infrastructure/certbot/conf:/etc/letsencrypt
#      - ./infrastructure/certbot/www:/var/www/certbot
#    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#
#
#  redis:
#    image: redis:7.0.8-alpine
##    ports:
##      - "${REDIS_EXT_PORT}:${REDIS_PORT}"
#    container_name: bizdata_saas__redis
#    restart: unless-stopped
#    volumes:
#      - ./infrastructure/redis:/data
#    environment:
#      REDIS_PASSWORD: ${REDIS_PASSWORD}
#    command: redis-server --requirepass $REDIS_PASSWORD
#    networks:
#      - app_network

  postgres:
    image: postgres:14.2-alpine
    container_name: bizdata_saas__postgres
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
#    ports:
#      - "${POSTGRES_EXT_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env
    environment:
      TZ: ${WORKSPACE_TIMEZONE}
    networks:
      - app_network

  minio:
    image: minio/minio:RELEASE.2024-01-01T16-36-33Z
    container_name: bizdata_saas__minio
    restart: unless-stopped
    ports:
      - "9001:9001"
    env_file:
      - .env
    command: minio server /data --address :9000 --console-address :9001
    volumes:
      - ./infrastructure/minio/data:/data
    networks:
      - app_network
      # aliases:
      # For localhost access, add the following to your /etc/hosts
      # 127.0.0.1       my-minio-localhost-alias
      # When accessing the minio container on a server with an accessible dns, use the following
      # - ${HOSTNAME}

  minio_mc:
    image: minio/mc:RELEASE.2023-12-29T20-15-29Z
    container_name: bizdata_saas__minio_mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        until (/usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' &&
        sleep 1;
        done;
        /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
        /usr/bin/mc mb --ignore-existing myminio/${MINIO_DEFAULT_BUCKET};
        /usr/bin/mc anonymous set download myminio/${MINIO_DEFAULT_BUCKET};
        /usr/bin/mc ilm import myminio/${MINIO_DEFAULT_BUCKET} < /config/bucket_lifecycle.json;
        sleep inf;
      "
    volumes:
      - ./infrastructure/minio/config:/config
    networks:
      - app_network

  front_main:
    container_name: bizdata_saas__front_main__prod
    build:
      context: .
      dockerfile: ./apps/front_main/production.dockerfile
    restart: unless-stopped
    networks:
      - app_network

  api:
    container_name: bizdata_saas__api__prod
    build:
      context: .
      dockerfile: ./apps/api/production.dockerfile
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MIKRO_ORM_TYPE: postgresql
      MIKRO_ORM_HOST: postgres
      MIKRO_ORM_PORT: ${POSTGRES_PORT}
      MIKRO_ORM_USER: ${POSTGRES_USER}
      MIKRO_ORM_PASSWORD: ${POSTGRES_PASSWORD}
      MIKRO_ORM_DB_NAME: ${POSTGRES_DB}
      MIKRO_ORM_FORCE_UTC_TIMEZONE: true
      MIKRO_ORM_POPULATE_AFTER_FLUSH: false
      MIKRO_ORM_LOAD_STRATEGY: JOINED
      MIKRO_ORM_USE_BATCH_INSERTS: true
      MIKRO_ORM_USE_BATCH_UPDATES: true
      MIKRO_ORM_CLI_USE_TS_NODE: false # For works w/o apps/api/tsconfig.json
      MIKRO_ORM_CLI_ALWAYS_ALLOW_TS: false
      MIKRO_ORM_BASE_DIR: /api_app_root/apps/api
      MIKRO_ORM_ENTITIES: ./dist/**/*.entity.js
      MIKRO_ORM_ENTITIES_TS: ./src/**/*.entity.ts
    networks:
      - app_network

networks:
  app_network:

volumes:
  postgres_data:
